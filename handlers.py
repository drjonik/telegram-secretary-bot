from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from dateparser import parse
from database import add_reminder, delete_reminder_by_text, get_reminders

menu_keyboard = ReplyKeyboardMarkup(
    [["–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
     ["–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Å–µ–∫—Ä–µ—Ç–∞—Ä—å ü§ñ", reply_markup=menu_keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    chat_id = update.message.chat_id

    if "–Ω–∞–ø–æ–º–Ω–∏" in text:
        time = parse(text, languages=['ru'])
        if time:
            add_reminder(chat_id, text, time.isoformat())
            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {time.strftime('%d.%m.%Y %H:%M')}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.")
    elif "—É–¥–∞–ª–∏—Ç—å" in text:
        delete_reminder_by_text(chat_id, text)
        await update.message.reply_text("üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    elif "—Å–ø–∏—Å–æ–∫" in text:
        reminders = get_reminders()
        user_reminders = [r for r in reminders if r[1] == chat_id]
        if user_reminders:
            msg = "\n".join([f"‚Ä¢ {r[2]} ‚Äî {r[3]}" for r in user_reminders])
            await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{msg}")
        else:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        await update.message.reply_text("ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
